主要是几块：
电网属性与仿真
前端展示
AI算法
交互与数据库、kafka

电网先用比较简单的，这样也方便展示。展示可能还是要手动调，没办法出自动化的成果，所以先找个简单的试着用着好了。仿真的话，想要根据后端的拓扑生成前端的展示，可能很难自动化。想要自动化的话可能需要一个完整的project来做了。
仿真不想自己搞，想要用现成的。不复杂的话也不是不能自己搞。
前端还是Flask+jinja，不用图片而是用元件形式。
AI算法可以多试，这个是重点。
交互啥的还好，主要我想试试kafka怎么搞，掌握点经验。

我觉得首先，可以先把仿真和前端生成的事情想好。是独立做project还是做个子功能。
我觉得整个分为两个大阶段。
第一个是仿真和前端贯通
第二个是AI模型的训练和运行贯通

前端上的困难在于，我不大想用nodejs来做，因为那样子的话我需要学nodejs，再用npm调用echarts来做前端。这样子功能会全一点，但是需要引入npm和python之间的后端连接，非常麻烦。
我认为的可行的方案是pyecharts，这个可以在Python的flask上运行的前端框架。然而，这个框架的限制比较大，主要还是为了数据作图而非我现在这个需求。所以说就比较难搞。我的想法是，一定要让点和边能够显示出来数据，毕竟潮流计算的话不显示点和边就太逗了。然后通过点形状来区分不同的设备，变压器的话，额外在边里面插入一个设备。 不同的点颜色可以用来表示电压高低，边的宽窄标记功率大小。
还有一个重点就是更新数据的问题。我在犹豫是每次都传一个整图，还是每次只传要更新的数据，我是倾向于后者的，毕竟要elegent嘛，而且我又没有deadline，我不急。（但是！这个放到最后做！因为我的图例还没有完全想清楚，所以如果先做了的话，之后会疯狂改动。我先传整图，但是留好框架之后改进）
所以我的第一步是先设计出来一套图例，用来在图上展示并完成legend。

设计完图例之后，我在犹豫是否应该修改symbol，让图中的symbol看起来更加“电气”。这也是个挺有意思的领域。
6.29：symbol做出来之后在图上看不到（尽管URL是有效的，所以我觉得还是暂时不搞url了吧）
准备做legend。试了一下用pyecharts额外引入legend，有点蠢。我还是用Flask传个图上来吧。重点：pyecharts只是用来作图的，别指望做什么其他功能，用合适的工具做合适的事情。

6.30：加入了legend之后，下一步就是加入开关功能。说起控制是不是就该有开关？或者是控制变压器的变比？
另外，我看了美国院的论文。我感觉我还是先学着美国院来做事情吧。美国院的控制功能是只控制发电机的出力的，不涉及断路器的开断。那么我干脆也先不搞断路器了，先做论文复现，再去尝试深入挖掘。

7.7：我发现我的图片之所以不能在pyecharts里面显示出来，可能是因为Flask建立的image url不得行。Flask的协议似乎是只有在直接访问的时候，才会给出image。比如我用Flask生成的url，插入进html里面，是显示不了的。网上随便找的图片，是可以的。
解决的方式是不发URL，而是发整个图片：用sendfile

下一步是把我需要的图片都整出来：png格式，透明背景，不要太大，长宽1:1（不然会被压缩）